@page "/"
@inject Services.ToDoListService ToDoService
@using Models

<h3>To-Do List</h3>

<div class="mb-3">
    <input @bind="newTaskDescription" placeholder="Enter new task" class="form-control" />
    <button @onclick="AddTaskAsync" class="btn btn-primary mt-2">Add Task</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Description</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in tasks)
        {
            <tr>
                <td>@task.Id</td>
                <td>
                    @if (editingTaskId == task.Id)
                    {
                        <!-- Input field for editing description -->
                        <input type="text" value="@editingDescription"
                               @oninput="e => editingDescription = e.Value?.ToString() ?? string.Empty"
                               @onkeypress="async e => await HandleKeyPress(e)"
                               @onblur="async () => await HandleBlur(task.Id)"
                               class="form-control" />

                    }
                    else
                    {
                        <!-- Clickable description text -->
                        <span @onclick="() => EditTaskDescription(task.Id, task.Description)" style="cursor: pointer;">
                            @task.Description
                        </span>
                    }
                </td>
                <td>@(task.IsComplete ? "Completed" : "Incomplete")</td>
                <td>
                    @if (!task.IsComplete)
                    {
                        <button @onclick="() => MarkTaskAsCompleteAsync(task.Id)" class="btn btn-success btn-sm">
                            Mark as Complete
                        </button>
                    }
                    else
                    {
                        <button @onclick="() => MarkTaskAsIncompleteAsync(task.Id)" class="btn btn-warning btn-sm">
                            Mark as Incomplete
                        </button>
                    }

                    <button @onclick="() => DeleteTaskAsync(task.Id)" class="btn btn-danger btn-sm">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<ToDoItem> tasks = new();
    private string newTaskDescription = string.Empty;

    private int? editingTaskId = null; // Track the task being edited
    private string editingDescription = string.Empty; // Store the new description for editing
    private bool hasSaved = false; // Prevent duplicate saves on Enter and Blur

    protected override async Task OnInitializedAsync()
    {
        tasks = await ToDoService.GetTasksAsync();
    }

    private async Task AddTaskAsync()
    {
        if (!string.IsNullOrWhiteSpace(newTaskDescription))
        {
            await ToDoService.AddTaskAsync(newTaskDescription);
            tasks = await ToDoService.GetTasksAsync();
            newTaskDescription = string.Empty;
        }
    }

    private async Task MarkTaskAsCompleteAsync(int id)
    {
        await ToDoService.MarkTaskAsCompleteAsync(id);
        tasks = await ToDoService.GetTasksAsync();
    }

    private async Task MarkTaskAsIncompleteAsync(int id)
    {
        await ToDoService.MarkTaskAsIncompleteAsync(id);
        tasks = await ToDoService.GetTasksAsync();
    }

    private async Task DeleteTaskAsync(int id)
    {
        await ToDoService.DeleteTaskAsync(id);
        tasks = await ToDoService.GetTasksAsync();
    }

    private void EditTaskDescription(int id, string currentDescription)
    {
        editingTaskId = id;
        editingDescription = currentDescription;
        hasSaved = false; // Reset the save flag for new edit session
    }

    private async Task SaveTaskDescriptionAsync(int id)
    {
        if (editingTaskId != null && !hasSaved)
        {
            hasSaved = true; // Set flag to avoid double save
            await ToDoService.UpdateTaskDescriptionAsync(id, editingDescription);
            tasks = await ToDoService.GetTasksAsync();
            editingTaskId = null;
            editingDescription = string.Empty;
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && editingTaskId != null)
        {
            await SaveTaskDescriptionAsync(editingTaskId.Value);
        }
    }

    private async Task HandleBlur(int id)
    {
        await SaveTaskDescriptionAsync(id);
    }
}