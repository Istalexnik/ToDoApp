@page "/"
@using ToDoApp.Models
@inject ToDoApp.Data.ToDoRepository ToDoRepository
@inject NavigationManager NavigationManager

<h3>To-Do List</h3>

<button @onclick="CreateNewToDo" class="btn btn-primary mb-3">Add New To-Do</button>

@if (todos != null && todos.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Description</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todos)
            {
                <tr>
                    <td>@todo.Description</td>
                    <td>@(todo.IsComplete ? "Completed" : "Incomplete")</td>
                    <td>
                        <button @onclick="() => ToggleCompleteAsync(todo)" class="btn btn-sm @(todo.IsComplete ? "btn-warning" : "btn-success")">
                            @(todo.IsComplete ? "Mark as Incomplete" : "Mark as Complete")
                        </button>
                        <button @onclick="() => EditToDo(todo.Id)" class="btn btn-info btn-sm">Edit</button>
                        <button @onclick="() => DeleteToDoAsync(todo.Id)" class="btn btn-danger btn-sm">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No to-dos available.</p>
}

@code {
    private List<ToDoItem> todos = new();

    protected override async Task OnInitializedAsync()
    {
        todos = await ToDoRepository.GetToDosAsync();
    }

    private async Task ToggleCompleteAsync(ToDoItem todo)
    {
        // Toggle the completion status
        todo.IsComplete = !todo.IsComplete;
        await ToDoRepository.UpdateToDoAsync(todo);

        // Reload the list to reflect the changes
        todos = await ToDoRepository.GetToDosAsync();
    }

    private async Task DeleteToDoAsync(int id)
    {
        await ToDoRepository.DeleteToDoAsync(id);
        todos = await ToDoRepository.GetToDosAsync();
    }

    private void CreateNewToDo()
    {
        NavigationManager.NavigateTo("/create-todo");
    }

    private void EditToDo(int id)
    {
        NavigationManager.NavigateTo($"/edit-todo/{id}");
    }
}
